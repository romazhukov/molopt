# #!/usr/bin/env python3
# # -*- coding: utf-8 -*-

# import json
# from pathlib import Path

# def ask(prompt, default=None, cast=str):
#     if default is not None:
#         prompt = f"{prompt} [{default}]: "
#     else:
#         prompt = f"{prompt}: "
#     val = input(prompt).strip()
#     return cast(val) if val else default

# def main():
#     tasks = []

#     print("=== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä tasks.json –¥–ª—è parallel_run_custom.py ===")
#     print("–í–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–ª–µ–∫—É–ª—ã. –û—Å—Ç–∞–≤—å –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.\n")

#     while True:
#         file = input("–§–∞–π–ª –º–æ–ª–µ–∫—É–ª—ã (.xyz, –ø—É—Å—Ç–æ = –∑–∞–∫–æ–Ω—á–∏—Ç—å): ").strip()
#         if not file:
#             break

#         engine = ask("Engine (rdkit/crest)", default="rdkit")
#         opt_level = ask("Opt-level (xtb/r2scan3c)", default="xtb")
#         charge = ask("Charge", default=0, cast=int)
#         mult = ask("Multiplicity", default=1, cast=int)

#         task = {
#             "file": file,
#             "engine": engine,
#             "opt_level": opt_level,
#             "charge": charge,
#             "multiplicity": mult
#         }
#         tasks.append(task)
#         print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task}\n")

#     if not tasks:
#         print("‚ö†Ô∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.")
#         return

#     outfile = ask("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", default="tasks.json")
#     Path(outfile).write_text(json.dumps(tasks, indent=2), encoding="utf-8")
#     print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ {outfile}")

# if __name__ == "__main__":
#     main()
